from aiogram import Router, types, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage, Redis

from other_func import connect, create_pimary_keys, calculate_func
from FSM_state import FSM_FORM

from aiogram.types import InlineKeyboardMarkup, CallbackQuery, PhotoSize, FSInputFile

import logging, datetime
from keyboard import *
from main import bot, PRIMARY_KEYS

router = Router()
user_db = {}

logger = logging.getLogger(__name__) 

logger.setLevel(10)
handler = logging.FileHandler('my_log.log', 'a', encoding='utf-8')
formatter = logging.Formatter('[{asctime}] #{levelname} {filename}:{lineno} - {message}', style='{')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
@router.message(Command('clear_state'))
async def clear_state(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('FSM is clear')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(CommandStart(), StateFilter(default_state))
async def process_start_bot(message: Message):
    await message.answer(text=f'‚ú®<b>{message.from_user.first_name}</b>‚ú®, –ø—Ä–∏–≤–µ—Ç.\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö:<b>\n-–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏\n-–§–æ—Ç–æ\n-–ö–æ–¥-—Ñ—Ä–∞–≥–º–µ–Ω—Ç\n-–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n</b>\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ <b>–≤–æ–π—Ç–∏</b> –∏–ª–∏ <b>—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –º–∞–≥–∞–∑–∏–Ω–∞</b>', reply_markup=enter_or_create_keyboard)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name, message.from_user.last_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ù–ï –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(CommandStart(), ~StateFilter(default_state))
async def process_start_bot(message: Message):
    await message.answer(text='<b>–í—ã–±–∏—Ä–∞–π</b>', reply_markup=in_db_keyboard)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

# –û—Ç–º–µ–Ω–∞ –≤—Ö–æ–¥–∞
@router.callback_query(F.data == 'cancelCD')
async def process_cancel(calback: CallbackQuery, state: FSMContext):
    await calback.message.edit_text('–ü—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=enter_or_create_keyboard)
    await state.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –ë–î
@router.callback_query(F.data == 'createCD')
async def process_enter_shop_id(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[enter_btn]])
    key = create_pimary_keys()
    await connect(typeActions='create_shop_TA', shop_id=key, user_id=callback.message.from_user.id)
    await callback.message.edit_text(f'–í–æ—Ç —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π <b>id</b> –º–∞–≥–∞–∑–∏–Ω–∞ - <b>{key}</b>\n–ó–∞–ø–æ–Ω–∏–º–Ω–∏ –µ–≥–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ–π—á–∞—Å –æ–Ω —É–¥–∞–ª–∏—Å—è', reply_markup=keyboard)
    logger.info(f'–ë—ã–ª —Å–æ–∑–¥–∞–Ω –º–∞–≥–∞–∑–∏–Ω: {key}')

# –í—Ö–æ–¥ –≤ –ë–î –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.callback_query(F.data == 'enterCD', StateFilter(default_state))
async def process_enter_shop(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_btn]])
    await callback.message.edit_text('–í–≤–µ–¥–∏ <b>id</b> –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞', reply_markup=keyboard)
    await state.set_state(FSM_FORM.stateWaitingShopId)
    
# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@router.message(StateFilter(FSM_FORM.stateWaitingShopId), F.text.in_(PRIMARY_KEYS))  # Delete StateFilter(FSM_FORM.stateBeingInDB)
async def process_set_shop_id(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await connect(typeActions='enter_shop_TA', shop_id=message.text, user_id=message.from_user.id)
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤–æ—à–µ–ªüëè', reply_markup=in_db_keyboard)
    await state.set_state(FSM_FORM.stateBeingInDB)

# –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞
@router.message(StateFilter(FSM_FORM.stateWaitingShopId))
async def warning(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_btn]])
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await message.answer('–õ–æ–ª–∏–∫ –±–ª–∏–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–ò–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π', reply_markup=keyboard)

# –í—ã—Ö–æ–¥ –∏–∑ –ë–î –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ë–î
@router.callback_query(F.data == 'exitCD', ~StateFilter(default_state))
async def process_exit(calback: CallbackQuery, state: FSMContext):
    await connect(typeActions='exit_db_TA', user_id=calback.from_user.id)
    await calback.message.edit_text('–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –ë–î', reply_markup=enter_or_create_keyboard)
    await state.clear()

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
@router.message(F.text.startswith('/show'))
async def show(message: Message):
    shops = await connect(typeActions='show_TA')
    await message.answer(str(shops))

# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ë–î
@router.callback_query(F.data == 'add_prdCD', StateFilter(FSM_FORM.stateBeingInDB))
async def add_product(calback: CallbackQuery, state: FSMContext):
    await calback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n\n–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –Ω–µ–º—É –æ—Ç–ø—Ä–∞–≤—å:\n1. –ö–æ–¥-—Ñ—Ä–∞–≥–º–µ–Ω—Ç\n2. –î–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä –≥–æ–¥–µ–Ω\n  <b>–í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì</b>\n3. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞(–æ–ø–∏—Ü–æ–Ω–∞–ª—å–Ω–æ)', reply_markup=cancel_enter_keyboard)
    await state.set_state(FSM_FORM.stateWaitingInfoProducts)

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, –¥–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –∏ –¥–æ–±–∞–≤—è–ª–µ—Ç —Ç–æ–≤–∞—Ä –≤ –ë–î
@router.message(StateFilter(FSM_FORM.stateWaitingInfoProducts), F.photo[-1].as_('largest_photo'))
async def process_set_photo_product(message: Message, state: FSMContext, largest_photo: PhotoSize):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    photo_id = message.photo[-1].file_id
    file_info = await bot.get_file(photo_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    try:
        caption = message.caption.split()
        cod_product = caption[0]
        date_poduct = caption[1]
        name_product = caption[2]
        assert cod_product.isdigit()
        datetime.datetime.strptime(date_poduct, "%d.%m.%Y")
        await connect(typeActions='add_product_TA', downloaded_file=downloaded_file, cod_product=cod_product, data_product=date_poduct, user_id=message.from_user.id, name_product=name_product)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        await state.update_data(
            photo_unique_id=largest_photo.file_unique_id,
            photo_id=largest_photo.file_id
            )
        # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await message.answer('<b>–ö—Ä–∞—Å–∞–≤–∞</b>, —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Ç–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=in_db_keyboard)
        await state.set_state(FSM_FORM.stateBeingInDB)
    except Exception as ex:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}')
        # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        await state.set_state(FSM_FORM.stateBeingInDB)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–∏—à–±–∫–∞\n–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.', reply_markup=in_db_keyboard)

@router.message(StateFilter(FSM_FORM.stateWaitingInfoProducts))
async def wrang_set_photo_products(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await state.set_state(FSM_FORM.stateBeingInDB)
    await message.answer(f'<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–∏–±–∫–∞</b>\n\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–æ—Ç–æ', reply_markup=in_db_keyboard)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ—è–¥—è—Ç—Å—è –≤ –ë–î
@router.callback_query(StateFilter(FSM_FORM.stateBeingInDB), F.data == 'show_prdCD')
async def show_products(callback: CallbackQuery):
    user_db[callback.from_user.id] = await connect(typeActions='show_products_TA', user_id=callback.from_user.id)
    if not user_db[callback.from_user.id]:
        await callback.message.edit_text('<b>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</b>', reply_markup=in_db_keyboard)
    else:
        page = user_db[callback.from_user.id]['page']
        if page == 1:
            await callback.message.edit_text(user_db[callback.from_user.id][1], reply_markup=cancel_enter_keyboard)
        else:
            await callback.message.edit_text(user_db[callback.from_user.id][page], reply_markup=pagination_keyboard)

# @router.callback_query(StateFilter(FSM_FORM.stateBeingInDB), F.data == 'backwardCD')
# async def process_backward_pegination(callback: CallbackQuery):
#     page = user_db[callback.from_user.id]['page'] 
#     try:
#         await callback.message.edit_text(user_db[callback.from_user.id][page-1], reply_markup=pagination_keyboard)
#         user_db[callback.from_user.id]['page'] -= 1
#     except:
#         page = user_db[callback.from_user.id]['lenth']
#         await callback.message.edit_text(user_db[callback.from_user.id][page], reply_markup=pagination_keyboard)
#         user_db[callback.from_user.id]['page'] = page

# @router.callback_query(StateFilter(FSM_FORM.stateBeingInDB), F.data == 'forwardCD')
# async def process_backward_pegination(callback: CallbackQuery):
#     page = user_db[callback.from_user.id]['page'] 
#     # await callback.message.edit_text(f'–≠—Ç–æ –≤—Å—ë\n{user_db[callback.from_user.id][1]}', cancel_input_btn)
#     await callback.message.edit_text(user_db[callback.from_user.id][1], reply_markup=cancel_input_btn)
#     try:
#         if page < 10:
#             page += 1
#             await callback.message.edit_text(user_db[callback.from_user.id][page], reply_markup=pagination_keyboard)
#             user_db[callback.from_user.id]['page'] += 1
#         else:
#             await callback.message.answer('lol')
#     except: send_message
#         user_db[callback.from_user.id]['page'] = 1
#         await callback.message.edit_text(user_db[callback.from_user.id][1], reply_markup=pagination_keyboard)

@router.callback_query(StateFilter(FSM_FORM.stateBeingInDB), F.data.in_(['backwardCD', 'forwardCD']))
async def process_pagination(callback: CallbackQuery):
    page = user_db[callback.from_user.id]['page']
    try:
        if callback.data == 'backwardCD':
            await callback.message.edit_text(user_db[callback.from_user.id][page-1], reply_markup=pagination_keyboard)
            user_db[callback.from_user.id]['page'] -=1
        elif callback.data == 'forwardCD':
            await callback.message.edit_text(user_db[callback.from_user.id][page+1], reply_markup=pagination_keyboard)
            user_db[callback.from_user.id]['page'] +=1
    except:
        if callback.data == 'backwardCD':
            page = user_db[callback.from_user.id]['lenth']
            await callback.message.edit_text(user_db[callback.from_user.id][page], reply_markup=pagination_keyboard)
            user_db[callback.from_user.id]['page'] = page
        elif callback.data == 'forwardCD':
            await callback.message.edit_text(user_db[callback.from_user.id][1], reply_markup=pagination_keyboard)
            user_db[callback.from_user.id]['page'] = 1

@router.callback_query(F.data == 'main_menuCD')
async def enter_main_menu_btn(callback: CallbackQuery):
    await callback.message.edit_text('<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º</b>', reply_markup=in_db_keyboard)
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
@router.callback_query(StateFilter(FSM_FORM.stateBeingInDB), F.data.in_(['3_daysCD, 15_daysCD']))
async def overduo_3_days(callback: CallbackQuery):
    if callback.data == '3_daysCD':
        fit_date = await connect(typeActions='enter_3_days_TA', user_id=callback.from_user.id)
    elif callback.data == '15_daysCD':
        fit_date = await connect(typeActions='enter_15_days_TA', user_id=callback.from_user.id)
    # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    if fit_date:
        for i in fit_date:
            photo = FSInputFile(f"shops/{str(i[0])}/{str(i[1])}.jpg")
            await callback.message.answer_photo(photo=photo, caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {i[3]}\n–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: <b>{i[1]}</b>, –ì–æ–¥–µ–Ω –¥–æ: <b>{i[2]}</b>')
        await callback.message.answer(text='<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º</b>', reply_markup=in_db_keyboard)
    else:
        await callback.message.edit_text(text="<b>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∞—Ç</b>", reply_markup=in_db_keyboard)

# @router.callback_query(StateFilter(FSM_FORM.stateBeingInDB), F.data == 'del_improper_productsCD')
# async def del_improper_products(callback: CallbackQuery, state: FSMContext):
#     await connect(typeActions='del_improper_products_TA', user_id=callback.from_user.id)
#     await callback.message.edit_text(text='\n<b>–í—Å–µ –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã</b>\n', reply_markup=in_db_keyboard)
#     await state.set_state(FSM_FORM.stateBeingInDB)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == 'calculationCD', StateFilter(FSM_FORM.stateBeingInDB))
async def wait_calculate(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>:\n\n1. –î–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è [–î–î.–ú–ú.–ì–ì–ì–ì]\n2. –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏\n3. –§–æ—Ä–º–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ (–¥/–º/–≥)', reply_markup=cancel_enter_keyboard)
    await state.set_state(FSM_FORM.stateCalculate)

@router.message(StateFilter(FSM_FORM.stateCalculate), F.text.split().len() == 3)
async def calculate(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    date_create, num, form = message.text.split()
    new_date = calculate_func(date_create, int(num), form)
    if new_date:
        await message.answer(f"–¢–æ–≤–∞—Ä –≥–æ–¥–µ–Ω –¥–æ <b>{str(new_date)}</b>",reply_markup=in_db_keyboard)
        await state.set_state(FSM_FORM.stateBeingInDB)
    else:
        await message.answer('<b>–ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞</b>\n –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', reply_markup=in_db_keyboard)
        await state.set_state(FSM_FORM.stateBeingInDB)

@router.message(StateFilter(FSM_FORM.stateCalculate))
async def wrang_data(message: Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message.answer('<b>–í–≤–µ–¥–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n1.–î–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è [–î–î.–ú–ú.–ì–ì–ì–ì]\n2.–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏\n3.–§–æ—Ä–º–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ (–¥/–º/–≥)', reply_markup=cancel_enter_keyboard)


@router.callback_query(F.data == 'del_prdCD', StateFilter(FSM_FORM.stateBeingInDB))
async def wait_del_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥-—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ø–µ—Ä–≤—ã—Ö –Ω—É–ª–µ–π', reply_markup=cancel_enter_keyboard)
    await state.set_state(FSM_FORM.stateWaitingDeleteProducts)

@router.message(StateFilter(FSM_FORM.stateWaitingDeleteProducts))
async def del_products(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    result = await connect(typeActions='del_products_TA', cod_product=message.text)
    if result == False:
        await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥', reply_markup=in_db_keyboard)

    else:
        await message.answer('<b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω</b>', reply_markup=in_db_keyboard)

    await state.set_state(FSM_FORM.stateBeingInDB)
        
@router.callback_query(F.data == 'cancel_inputCD')
async def cancel_enter(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º</b>', reply_markup=in_db_keyboard)
    await state.set_state(FSM_FORM.stateBeingInDB)

@router.message(Command('master'))
async def show_master_splinter(message: Message):
    # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await message.answer('–í–µ–ª–∏–∫–∏–π –º–∞—Å—Ç–µ—Ä –°–ø–ª–∏–Ω—Ç–µ—Ä –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n<b>–í—è—á–µ—Å–ª–∞–≤ –ü–∞–≤–ª—é–∫</b>')
    logger.info('–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è /master')